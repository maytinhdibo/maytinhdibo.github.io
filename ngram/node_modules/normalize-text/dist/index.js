/*!
 * normalize-text v2.1.2
 * (c) Vitor Luiz Cavalcanti <vitorluizc@outlook.com> (https://vitorluizc.github.io)
 * Released under the MIT License.
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var pipe = _interopDefault(require('@bitty/pipe'));

/**
 * Capitalize first character of received text.
 * @example
 * capitalizeFirstLetter('karl Marx');
 * //=> "Karl Marx"
 * @param {string} text - A `string` value.
 * @returns {string}
 */
var capitalizeFirstLetter = function (text) { return text.charAt(0).toLocaleUpperCase() + text.substring(1); };

/**
 * If `String.prototype.normalize` is supported it normalizes diacritics by
 * replacing them with "clean" character from received text.
 * @example
 * normalizeDiacritics('Olá, você aí');
 * //=> 'Ola, voce ai'
 * @param {string} text - A `string` value.
 * @returns {string}
 */
var normalizeDiacritics = function (text) { return String.prototype.normalize ? text.normalize('NFKD').replace(/[\u0080-\uF8FF]/g, '') : text; };

/**
 * Normalize all white-space characters and remove trailing ones received text.
 * @example
 * normalizeWhiteSpaces(' What exactly is it?   ');
 * //=> "What exactly is it?"
 *
 * normalizeWhiteSpaces('Hi,   how is \r\n everything  \t?');
 * //=> 'Hi, how is everything ?'
 * ```
 * @param {string} text - A `string` value.
 * @returns {string}
 */
var normalizeWhiteSpaces = function (text) { return text.replace(/\s+/g, ' ').trim(); };

/**
 * Split text into words.
 * @param {string} text - A `string` value.
 * @returns {string[]}
 */

var splitWords = function (text) { return normalizeWhiteSpaces(text.toLocaleLowerCase()).split(' '); };
/**
 * Capitalize word if it isn't an exception.
 * @param {string[]} exceptions - A list of exceptions in lower-case.
 * @returns {(word: string) => string}
 */


var capitalizeWordExcept = function (exceptions) { return function (word) { return exceptions.indexOf(word) > -1 ? word : capitalizeFirstLetter(word); }; };
/**
 * Normalize received name by normalizing it's white-spaces and capitalizing
 * first letter of every word but exceptions (received in lower-case).
 * @example
 * normalizeName(' fernanDA  MONTENEGRO');
 * //=> "Fernanda Montenegro"
 *
 * normalizeName(' wilson da costa', ['da']);
 * //=> "Wilson da Costa"
 * @param {string} name - A `string` value.
 * @param {string} [exceptions] - A list of exceptions in lower-case.
 * @returns {string}
 */


var normalizeName = function (name, exceptions) {
	if ( exceptions === void 0 ) exceptions = [];

	return splitWords(name).map(capitalizeWordExcept(exceptions)).join(' ');
};

/**
 * Get the last character of received text.
 * @param {string} text - A `string` value.
 * @returns {string}
 */

var getLastChar = function (text) { return text.charAt(text.length - 1); };
/**
 * Add a period at end of a text, if you don't already have one.
 * @param {string} text - A `string` value.
 */


var addPeriodAtEnd = function (text) { return getLastChar(text) === '.' ? text : text + '.'; };
/**
 * Normalize a paragraph by normalizing its white-spaces, capitalizing first
 * letter and putting a period at end.
 * @example
 * normalizeParagraph(' once upon a time');
 * //=> "Once upon a time."
 * @param {string} value
 * @returns {string}
 */


var normalizeParagraph = /*#__PURE__*/pipe(normalizeWhiteSpaces, addPeriodAtEnd, capitalizeFirstLetter);

/**
 * Resolve one or multiple texts into a single one.
 * @param {string | string[]} values - A `string` or an array of `string` values.
 * @returns {string}
 */

var resolveToText = function (values) { return Array.isArray(values) ? values.join(' ') : values; };
/**
 * Transforms a text to lower case.
 * @param {string} text - A `string` value.
 * @returns {string}
 */


var transformToLowerCase = function (text) { return text.toLocaleLowerCase(); };
/**
 * Resolve received texts (when receives an `Array`) by normalizing its
 * white-spaces and its diacritics and transforming to lower-case.
 * @example
 * normalizeText(' so there\'s  a  Way to NORMALIZE ');
 * //=> "so there\'s a way to normalize"
 *
 * normalizeText(['Olá\r\n', 'como está a   senhorita?']);
 * //=> "ola como esta a senhorita?"
 * @param {string | string[]} values - A `string` or an array of `string` values.
 * @returns {string}
 */


var normalizeText = /*#__PURE__*/pipe(resolveToText, normalizeDiacritics, normalizeWhiteSpaces, transformToLowerCase);

exports.capitalizeFirstLetter = capitalizeFirstLetter;
exports.default = normalizeText;
exports.normalizeDiacritics = normalizeDiacritics;
exports.normalizeName = normalizeName;
exports.normalizeParagraph = normalizeParagraph;
exports.normalizeText = normalizeText;
exports.normalizeWhiteSpaces = normalizeWhiteSpaces;
